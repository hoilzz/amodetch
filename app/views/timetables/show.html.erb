<div class = "row">

  <!-- development -->
  <!-- 시간표 TABLE VIEW -->
  <div class = "container" style = "width : 90%">
    <div class = "col m8" id="timetable" data-t-id = "<%= @current_timetable.id%>">
    <div class = "timetable_container">
      <div class = "timetable_name_box">
        <p class = "lead">
          <%=@current_timetable.name%>
        </p>
      </div>

      <div class = "name_edit_btn">
        <%= link_to " ", edit_timetable_path(@current_timetable),
                         class: 'glyphicon glyphicon-pencil' %>
      </div>

      <div class = "timetable_semester">
        <p class = "lead"> <%= @current_timetable.semester%> / </p>
      </div>

      <div class = "total_credits">
        <span class = "lead"> 총 </span>
        <span class = "lead credits"></span>
        <span class = "lead">학점</span>
      </div>


      <div class="lessons" style = "font-size:14px;">
        <%= render 'enrollments/table_form' %>
      </div>
      </div>
    </div>  <!-- col m8 -->

  <div class = "col m4">
  <!-- 시간표 테이블 right_container  :  검색창, 내가 담은 강의 -->
  <!--div class="right-container" style = "z-index : 999"-->

      <%= form_tag search_url, :method => 'get', id: 'searchForm' do %>
          <%= text_field_tag :searchWord, params[:search],
              placeholder: :"과목 또는 교수님명을 입력해주세요!" %>
          <%= hidden_field_tag :semester, @current_timetable.semester %>
      <% end %>



    <%= render 'search_table'%>
       <!-- 검색 결과 -->



    <div class = "my_cart_container">
        <span class = "lead"> 내가 담은 과목 </span>
        <table class="cart striped">
          <thead>
            <tr>
              <th class = "cart__td">강의명</th>
              <th class = "cart__td">교수명</th>
              <th class = "cart__td">학점</th>
              <th class = "cart__td">이수</th>
              <th class = "cart__td">삭제</th>
            </tr>
          </thead>

          <tbody>

          </tbody>

        </table>
    </div>



  </div>  <!-- col s4 -->


  </div>  <!-- container -->
</div>  <!-- row -->

<script>

(function($,document,window,undefined){
    var timetable = {

        colorIdx: 0,


    findLectures: function(formElement, pageNumClicked){
       // Get some values from elements on the page:
      var $form = $( formElement ),
        word = $form.find( "input[name='searchWord']" ).val(),
        url = $form.attr( "action" ),
        semester = $form.find("input[name='semester']").val();
      var pageNum = pageNumClicked || 1;

      // Send the data using post
      var posting = $.post( url, { searchWord: word, semester: semester, pageSelected: pageNum});

      posting.success(function( data ) {
        var collectionUl = $('ul.collection');
        var paginationUl = $('ul.pagination');
        var dataLecture_len = data.lectures.length;

        collectionUl.html('');
        paginationUl.html('');

        // 강의 검색 결과인 강의정보 row 생성
        // 강의명, 교수명, 강의시간, 개설학과
        // data-hover : 강의시간을 시간표 cell id로 변환 한것을 저장
        for (var i = 0; i < dataLecture_len; i++)
        {
          //var dataSchDetail_len = data.lectures[i].schDetails.length;

          var lec_title          = "<div class=title></div>",
              lec_professor      = "<span class=professor></span>",
              lec_time           = "<span class=lecturetime></span>",
              lec_openDepartment = "<span style=float:right></span>",
              collectionLi = "<li class=collection-item></li>";

          // 강의명, 교수명, 강의시간, 개설학과 순서대로 html 값 삽입
          lec_title = $(lec_title).html(data.lectures[i].subject);
          lec_professor = $(lec_professor).html(data.lectures[i].professor);
          lec_time = $(lec_time).html(data.lectures[i].lecture_time);
          lec_openDepartment = $(lec_openDepartment).html(data.lectures[i].open_department);

          // li 태그 안에 순서대로 삽입.
          collectionLi = timetable.insertLecTime(collectionLi, data.lectures[i].schDetails);

          collectionLi = $(collectionLi).attr('data-sch-id', data.lectures[i].schedule_id);

          collectionLi = $(collectionLi).append(lec_title).append(lec_professor).append(lec_time).append(lec_openDepartment);
          $(collectionUl).append(collectionLi);
        }

        timetable.fillSearchPagination(data.pageSelected, data.finalPageNum);

      });
    },
    init: function()
    {
      $( "#searchForm" ).submit(function( event ) {
       // Stop form from submitting normally
       event.preventDefault();
       var $form = $(this);
       timetable.findLectures($form, null);
     });
     // 검색 결과 page 번호 클릭시
     $('body').on('click', '.waves-effect', function(event){
       event.preventDefault();
       var $form = $('#searchForm');
       var pageNumber = $(this).find('a').html();
       timetable.findLectures($form, pageNumber);
     });

     // 검색 결과 강의 클릭시
     $('body').on('click', '.collection-item', function(event){
       // 시간표에 강의 등록하기
       event.preventDefault();
       timetable.putLectureOnTimetable($(this));
     });

     // 검색 결과 강의에 마우스 커서 올렸을 때
     $('body').on('mouseenter', '.collection-item', function(event){
       event.preventDefault();
       timetable.fillPreviewLecture($(this));

     });
     $('body').on('mouseleave', '.collection-item', function(event){
       event.preventDefault();
       timetable.erasePreviewLecture();
     });

     // 시간표에 담긴 강의 삭제하기
     $('body').on('click', '.lessons table tbody tr td', function(event){
       event.preventDefault();
       timetable.destroyTimetableItem($(this));
     });

     $('body').on('mouseenter', '.timetable__td--has-lec', function(event){
       event.preventDefault();
       $(this).find(".timetable__span--del").css('display','inline');
       $(this).find(".timetable__span--info").css('display','inline');
     });

     $('body').on('mouseleave', '.timetable__td--has-lec', function(event){
       event.preventDefault();
       $(this).find(".timetable__span--del").removeAttr('style');
       $(this).find(".timetable__span--info").removeAttr('style');
     });

     // timetable의 td의 X 클릭시,
     $('body').on('click', '.timetable__span--del', function(event){
       event.preventDefault();
       // ajax로 삭제 요청
     });

     timetable.getSchedulesOnTimetable();

    },

    getSchedulesOnTimetable: function()
    {
      // timetable_id를 데이터로 전송
      var timetable_id = $("#timetable").data("t-id");
      $.ajax({
              url:'/load'+'.json',
              dataType: "json", // response type
              type:'GET',
              data: {'timetable_id':timetable_id},
              success:function(data)
              {
                // timetable에 fill 해주기
                for (var i = 0; data.lectures[i]; i+=1)
                {
                  timetable.fillLecture(data.lectures[i]);
                  timetable.addNewLectureTD(data.lectures[i]);
                }
              },
              error:function(jqXHR, textStatus, errorThrown)
              {
                alert("강의 불러오기 실패했수다..")
              }
            });
    },

    fillSearchPagination: function(pageSelected, pageTotal)
    {
      var pagination = $('.pagination');
      var _pageSelected = pageSelected*1;
      if(_pageSelected <=2)
      {
        for(var pageNum = 1; pageNum <= 3; pageNum++)
        {
          if (pageNum > pageTotal ) {break;}
          var paginationLi = "<li class=waves-effect></li>";
          var paginationLi_a = "<a href=#></a>";

          paginationLi_a = $(paginationLi_a).html(pageNum);
          paginationLi = $(paginationLi).append(paginationLi_a);

          if (pageSelected == pageNum)
          {
            $(paginationLi).addClass('active').removeClass('waves-effect');
          }
          $(pagination).append(paginationLi);
        }
      }
      else
      {
        for(var pageNum = pageSelected-1; pageNum <= _pageSelected+1; pageNum+=1)
        {
          if (pageNum > pageTotal ) {break;}
          var paginationLi = "<li class=waves-effect></li>";
          var paginationLi_a = "<a href=#></a>";

          paginationLi_a = $(paginationLi_a).html(pageNum);
          paginationLi = $(paginationLi).append(paginationLi_a);

          if (pageSelected == pageNum)
          {
            $(paginationLi).addClass('active').removeClass('waves-effect');
          }
          $(pagination).append(paginationLi);
        }
      }
    },

    // lecTimes는 schedule_details 테이블에서 가져온 결과 배열
    insertLecTime: function(searchLi, lecTimes)
    {
      var sLi = searchLi;
      var lecTimeLen = lecTimes.length;
      var time_list_str = "";

      time_list_str = timetable.makeIntervalThirtyMin(lecTimes);

      sLi = $(sLi).attr('data-cell-time', time_list_str);
      return $(sLi);
    },

    // 시작시간 - 끝시간을, 30분 간격으로 string list 만듬
    // 월수13:00-15:00 : {start_time : 1330, end_time : 1500, day : "월"}
    //                  {day : "수"}
    // return : "v0_1300, v0_1350, v0_1400, v0_1430/v2_1300...,v2_1430"
    makeIntervalThirtyMin: function(lecTimes)
    {
      var time_list_str = "";
      var lecTimeLen = lecTimes.length;

      for (var i = 0; i < lecTimeLen; i+=1)
      {
        var i_time = lecTimes[i].start_time*1,
            e_time   = lecTimes[i].end_time*1;

        for (; i_time < e_time; i_time += 50)
        {
          time_list_str = time_list_str + lecTimes[i].day + "_" + i_time + ",";
        }
        time_list_str = time_list_str.slice(0, -1);
        time_list_str = time_list_str + "/";
      }
      // 마지막 "," 제거
      time_list_str = time_list_str.slice(0, -1);

      return time_list_str;
    },

    // 추가된 강의 시간표에서 미리보기
    // TODO : 변수 리팩토링 필수.. 나도 코딩하면서 헷갈림..
    fillPreviewLecture: function(lectureItem)
    {
      var l_item = $(lectureItem),
        // Split by Day, 요일에 따라 강의 시간 Split
        day_list_arr = $(l_item).data("cell-time").split("/"),
        $duplicate_cell;

        // 강의 시간이 있는 강의
        if (day_list_arr[0].length > 0)
        {
          for(var i_day = 0; day_list_arr[i_day]; i_day+=1)
          {
            var time_list_arr = day_list_arr[i_day].split(",");

            for(var j = 0; time_list_arr[j]; j+=1)
            {
              // 중복 검사 후, 중복이면 td에 빨간 줄 그리는 함수
              timetable.isDuplicateSchedule($("#"+time_list_arr[j]));

              $("#"+time_list_arr[j]).addClass("timetable__td--active");
            }
          }
        }
        else
        {
            var cyber_col = ["v5_800", "v5_850", "v5_900","v5_950", "v5_1000", "v5_1050", "v5_1100", "v5_1150", "v5_1200",
                             "v5_1250", "v5_1300", "v5_1350", "v5_1400", "v5_1450", "v5_1500", "v5_1550", "v5_1600", "v5_1650",
                              "v5_1700", "v5_1750", "v5_1800", "v5_1850", "v5_1900", "v5_1950", "v5_2000", "v5_2050", "v5_2100"];
            for (var i = 0; cyber_col[i]; i+=1)
            {
              var $tempCell = $("#"+cyber_col[i]);
              if ($tempCell.hasClass("timetable__td--has-lec"))
              {
                continue;
              }
              else
              {
                $tempCell.addClass("timetable__td--active");
                $("#"+cyber_col[i+1]).addClass("timetable__td--active");
                return;
              }
            }
        }
        // 첫번째 셀에 rowspan, 강의명, 교수명 추가

    },

    fillDuplicate: function(idVal)
    {
      var $cells = $('.'+idVal);

      for ( var i = 0; $cells[i]; i+=1)
      {
        $($cells[i]).addClass("timetable__td--duplicate");
      }
    },

    isDuplicateSchedule: function(scheduleCell)
    {
      var $sch_cell = $(scheduleCell),
          rex = /t\d+/,
          className = $($sch_cell).attr('class');
      if (rex.test(className))
      {
        var duplicateClass = rex.exec(className);
        timetable.fillDuplicate(duplicateClass);
      }
    },

    erasePreviewLecture: function()
    {
      $("#timetable td").removeClass("timetable__td--active").removeClass("timetable__td--duplicate");
    },

    // 시간표에 강의 등록 (via ajax)
    putLectureOnTimetable: function(lectureItem)
    {
      var sch_id = $(lectureItem).data('sch-id'),
        timetable_id = $("#timetable").data('t-id');
      // url = timetables/:timetable_id/timetable_items == timetable_timetable_items_url
        var $duplicateCellLen = $('#timetable').find(".timetable__td--duplicate").length;

      if ($duplicateCellLen > 0)
      {
        alert("중복된 강의 있다");
      }

      else
      {
        $.ajax({
                url:'<%= timetable_items_url %>'+'.json',
                dataType: "json", // response type
                type:'POST',
                beforeSend: function(xhr) {xhr.setRequestHeader('X-CSRF-Token', $('meta[name="csrf-token"]').attr('content'))},
                data: {'timetable_item': {'timetable_id':timetable_id, 'schedule_id':sch_id}},
                success:function(data)
                {
                  alert('성공했수다..');
                  // timetable에 fill 해주기
                  timetable.fillLecture(data);
                  timetable.addNewLectureTD(data);
                },
                error:function(jqXHR, textStatus, errorThrown)
                {
                  console.log(JSON.stringify(jqXHR));
                  console.log("AJAX error: " + textStatus + ' : ' + errorThrown);
                  alert("실패했수다..")
                }
              });
      }

    },

    // data = { Lecture : {subject, professor, isu},
    //         Schedule : {id, place}}
    //  ScheduleDetails : {start_time, end_time, day}...}
    fillLecture: function(data)
    {
      var l_data = data,
          // return : "v0_1300, v0_1350, v0_1400, v0_1430/v2_1300...,v2_1430
          schedule_str = timetable.makeIntervalThirtyMin(data.schDetails),
          day_list_arr = schedule_str.split("/"),
          color_idx = "td--c" + (timetable.colorIdx++) % 10;

      // 학점 누적하는 메서드(학점)
      timetable.updateCredits(data.credit);

      // 사강은 else문으로
      // fill 강의시간이 있는 강의
      if (day_list_arr[0].length > 0)
      {
        for (var i = 0; day_list_arr[i]; i+=1 )
        {
          var time_list_arr = day_list_arr[i].split(","),
            time_cell = $("#"+time_list_arr[0]),
            subject_blk = "<span class=subject></span>",
            professor_blk = "<span class=professor></span>",
            place_blk = "<span class=place></span>",
            delete_btn = "<span class=timetable__span--del></span>";
            info_link_btn = "<span class=timetable__span--info></span>";

          subject_blk = $(subject_blk).addClass("timetable__span").html(data.subject);
          professor_blk = $(professor_blk).addClass("timetable__span").html(data.professor);
          place_blk = $(place_blk).addClass("timetable__span").html(data.place);

          //TODO : info_link_btn에 a 태그 (/강의id) 생성//

          time_cell = $(time_cell).append(subject_blk).append(professor_blk).append(place_blk).append(delete_btn).append(info_link_btn);



          $(time_cell).attr('rowspan', time_list_arr.length).addClass("timetable__td--has-lec");

          $(time_cell).addClass("t"+data.timeitem_id);

          // attr은 리턴값이 없다.... API좀 제대로 읽자..
          $(time_cell).attr('data-t-item-id', data.timeitem_id);

          // timetable의 인덱스를 기준으로 background color
          $(time_cell).addClass(color_idx);


          for(var j = 1; time_list_arr[j]; j+=1)
          {
            $("#"+time_list_arr[j]).addClass("timetable__td--has-lec");
            $("#"+time_list_arr[j]).addClass("t"+data.timeitem_id);
            $("#"+time_list_arr[j]).css('display','none');
          }
        }
      }
      else
      {
        var cyber_col = ["v5_800", "v5_850", "v5_900", "v5_950", "v5_1000", "v5_1050", "v5_1100", "v5_1150", "v5_1200",
                         "v5_1250", "v5_1300", "v5_1350", "v5_1400", "v5_1450", "v5_1500", "v5_1550", "v5_1600", "v5_1650",
                          "v5_1700", "v5_1750", "v5_1800", "v5_1850", "v5_1900", "v5_1950", "v5_2000", "v5_2050", "v5_2100"];

        // 반복문을 통해 사강 column에 빈 cell찾기.
        // 찾으면 강의 정보 insert
        for (var i = 0; cyber_col[i]; i+=1)
        {
          var $tempCell = $("#"+cyber_col[i]);
          if ($tempCell.hasClass("timetable__td--has-lec"))
          {
            continue;
          }
          else
          {

            $($tempCell).attr('rowspan', 2).addClass("timetable__td--has-lec");
            $($tempCell).html(""+data.subject+" "+data.professor);
            $($tempCell).addClass("t"+data.timeitem_id);

            $($tempCell).attr('data-t-item-id', data.timeitem_id);

            $($tempCell).addClass(color_idx);



            $("#"+cyber_col[i+1]).addClass("timetable__td--has-lec");
            $("#"+cyber_col[i+1]).addClass("t"+data.timeitem_id);
            $("#"+cyber_col[i+1]).css('display','none');


            return;
          }
        }
      }



    },

    // td생성 후, cart table에 담기
    // td에 들어갈 정보 : 강의명, 교수명, 학점, 이수, timeitem_id
    // td 스타일 가이드 : 강의명 (40%), 교수명 (20%), ..
    addNewLectureTD: function(data)
    {
      var dataArr = [data.subject, data.professor, data.credit, data.isu, data.timeitem_id],
          $temp_tr = "<tr></tr>";
      for (var i = 0; i < 4; i+=1)
      {
        // 기본정보 td 생성
        var $temp_td = "<td class=cart__td>" + dataArr[i] + "</td>";
        $temp_tr = $($temp_tr).append($temp_td);
      }

      // 삭제 td, data-t-item-id 추가 위해 따로 코드
      var $destroyTd = "<td>" + "X" + "</td>";
      $destroyTd = $($destroyTd).attr('data-t-item-id', data.timeitem_id);

      $temp_tr = $($temp_tr).addClass("c"+data.timeitem_id).attr('data-credit', data.credit);
      $($temp_tr).append($destroyTd);
      // cart 테이블에 tr 추가

      $(".cart").append($temp_tr);

    },

    updateCredits: function(newCredit)
    {
      var current_credit = $(".credits").html();
      $(".credits").html( (current_credit*1) + newCredit );
    },


    // TODO ajax 덩어리를 쪼개자.
    // 타임테이블의 cell에서 클릭시, cart 테이블에서 X 클릭시
    destroyTimetableItem: function(timetableItem)
    {
      var time_item = $(timetableItem),
          t_item_id = $(time_item).attr('data-t-item-id');

          $.ajax({
    				url: "/timetable_items/" + t_item_id + ".json",
    				dataType: "json",
            data: {'id':t_item_id},
    				type: "DELETE",
    				success: function(time_item_id) {
              timetable.eraseTimetableItem(time_item_id);

              var creditSubtracted = ( $(".c"+time_item_id).data("credit") ) * 1;
              timetable.updateCredits((creditSubtracted*-1));

              timetable.eraseCartTableItem(time_item_id);

    					alert("삭제 성공")
    				},
    				error: function() {
    					alert('삭제에 실패했습니다. 다시 시도해 주세요.');
    				}
    			});
    },

    eraseTimetableItem: function(time_item_id)
    {
      var time_item_tds = $(".t"+time_item_id),
          time_items_len = $(time_item_tds).length;

      for (var i = 0; i < time_items_len; i+=1)
      {
        $time_item_td = $($(time_item_tds)[i]);
        $time_item_td.removeClass().html('').css('display','table-cell');
        $time_item_td.prop('rowspan', null).attr('data-t-item-id', null);
      }
    },

    eraseCartTableItem: function(time_item_id)
    {
      $(".cart").find(".c"+time_item_id).remove();
    }


  }
  $(document).ready(timetable.init);
})(jQuery,document,window);


</script>
