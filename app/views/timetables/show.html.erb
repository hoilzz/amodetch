<div class = "row">

  <!-- development -->
  <!-- 시간표 TABLE VIEW -->
  <div class = "container" style = "width : 90%">
    <div class = "col m8" id="timetable" data-t-id = "<%= @current_timetable.id%>">
    <div class = "timetable_container">
      <div class = "timetable_name_box">
        <p class = "lead">
          <%=@current_timetable.name%>
        </p>
      </div>

      <div class = "name_edit_btn">
        <%= link_to " ", edit_timetable_path(@current_timetable),
                         class: 'glyphicon glyphicon-pencil' %>
      </div>

      <div class = "timetable_semester">
        <p class = "lead"> <%= @current_timetable.semester%> / </p>
      </div>

      <div class = "total_credits">
        <span class = "lead"> 총 </span>
        <span class = "lead credits"></span>
        <span class = "lead">학점</span>
      </div>


      <div class="lessons" style = "font-size:14px;">
        <%= render 'enrollments/table_form' %>
      </div>
      </div>
    </div>  <!-- col m8 -->

  <div class = "col m4">
  <!-- 시간표 테이블 right_container  :  검색창, 내가 담은 강의 -->
  <!--div class="right-container" style = "z-index : 999"-->

      <%= form_tag search_url, :method => 'get', id: 'searchForm' do %>
          <%= text_field_tag :searchWord, params[:search],
              placeholder: :"과목 또는 교수님명을 입력해주세요!" %>
          <%= hidden_field_tag :semester, @current_timetable.semester %>
      <% end %>



    <%= render 'search_table'%>
       <!-- 검색 결과 -->



    <div class = "my_cart_container">
      <div class = "total_credits">
        <span class = "lead"> 내가 담은 과목 </span>
      </div>

    </div>



  </div>  <!-- col s4 -->


  </div>  <!-- container -->
</div>  <!-- row -->

<script>

(function($,document,window,undefined){
    var timetable = {


    findLectures: function(formElement, pageNumClicked)
    {
      // Get some values from elements on the page:
      var $form = $( formElement ),
        word = $form.find( "input[name='searchWord']" ).val(),
        url = $form.attr( "action" ),
        semester = $form.find("input[name='semester']").val();
      var pageNum = pageNumClicked || 1;

      // Send the data using post
      var posting = $.post( url, { searchWord: word, semester: semester, pageSelected: pageNum});

      posting.success(function( data ) {
        var collectionUl = $('ul.collection');
        var paginationUl = $('ul.pagination');
        var dataLecture_len = data.lectures.length;

        collectionUl.html('');
        paginationUl.html('');

        // 강의 검색 결과인 강의정보 row 생성
        // 강의명, 교수명, 강의시간, 개설학과
        // data-hover : 강의시간을 시간표 cell id로 변환 한것을 저장
        for (var i = 0; i < dataLecture_len; i++)
        {
          //var dataSchDetail_len = data.lectures[i].schDetails.length;

          var lec_title          = "<div class=title></div>";
          var lec_professor      = "<span class=professor></span>";
          var lec_time           = "<span class=lecturetime></span>";
          var lec_openDepartment = "<span style=float:right></span>";

          var collectionLi = "<li class=collection-item></li>";

          // 강의명, 교수명, 강의시간, 개설학과 순서대로 html 값 삽입
          lec_title = $(lec_title).html(data.lectures[i].subject);
          lec_professor = $(lec_professor).html(data.lectures[i].professor);
          lec_time = $(lec_time).html(data.lectures[i].lecture_time);
          lec_openDepartment = $(lec_openDepartment).html(data.lectures[i].open_department);


          // li 태그 안에 순서대로 삽입.
          collectionLi = timetable.insertLecTime(collectionLi, data.lectures[i].schDetails);

          collectionLi = $(collectionLi).attr('data-sch-id', data.lectures[i].schedule_id);

          collectionLi = $(collectionLi).append(lec_title).append(lec_professor).append(lec_time).append(lec_openDepartment);
          $(collectionUl).append(collectionLi);
        }

        timetable.fillSearchPagination(data.pageSelected, data.pageTotal);

      });
    },
    init: function()
    {
      $( "#searchForm" ).submit(function( event ) {
       // Stop form from submitting normally
       event.preventDefault();
       var $form = $(this);
       timetable.findLectures($form, null);
     });
     // 검색 결과 page 번호 클릭시
     $('body').on('click', '.waves-effect', function(event){
       event.preventDefault();
       var $form = $('#searchForm');
       var pageNumber = $(this).find('a').html();
       timetable.findLectures($form, pageNumber);
     });

     // 검색 결과 강의 클릭시
     $('body').on('click', '.collection-item', function(event){
       // 시간표에 강의 등록하기
       event.preventDefault();
       timetable.putLectureOnTimetable($(this));
     });

     // 검색 결과 강의에 마우스 커서 올렸을 때
     $('body').on('mouseenter', '.collection-item', function(event){
       event.preventDefault();
       timetable.fillPreviewLecture($(this));

     });
     $('body').on('mouseleave', '.collection-item', function(event){
       event.preventDefault();
       timetable.erasePreviewLecture($(this));
     });

     // 시간표에 담긴 강의 삭제하기
     $('body').on('click', '.lessons table tbody tr td', function(event){
       event.preventDefault();
       timetable.destroyTimetableItem($(this));
     });

     timetable.getSchedulesOnTimetable();

    },

    getSchedulesOnTimetable: function()
    {
      // timetable_id를 데이터로 전송
      var timetable_id = $("#timetable").data("t-id");
      $.ajax({
              url:'/load'+'.json',
              dataType: "json", // response type
              type:'GET',
              data: {'timetable_id':timetable_id},
              success:function(data)
              {
                // timetable에 fill 해주기
                for (var i = 0; data.lectures[i]; i+=1)
                {
                  timetable.fillLecture(data.lectures[i]);
                }
              },
              error:function(jqXHR, textStatus, errorThrown)
              {
                alert("강의 불러오기 실패했수다..")
              }
            });
    },

    fillSearchPagination: function(pageSelected, pageTotal)
    {
      var pagination = $('.pagination');
      if(pageSelected <=2)
      {
        for(var pageNum = 1; pageNum <= 3; pageNum++)
        {
          if (pageNum > pageTotal ) {break;}
          var paginationLi = "<li class=waves-effect></li>";
          var paginationLi_a = "<a href=#></a>";

          paginationLi_a = $(paginationLi_a).html(pageNum);
          paginationLi = $(paginationLi).append(paginationLi_a);

          if (pageSelected == pageNum)
          {
            $(paginationLi).addClass('active').removeClass('waves-effect');
          }
          $(pagination).append(paginationLi);
        }
      }
      else
      {
        for(var pageNum = pageSelected-1; pageNum <= pageSelected+1; pageNum++)
        {
          if (pageNum > pageTotal ) {break;}
          var paginationLi = "<li class=waves-effect></li>";
          var paginationLi_a = "<a href=#></a>";

          paginationLi_a = $(paginationLi_a).html(pageNum);
          paginationLi = $(paginationLi).append(paginationLi_a);

          if (pageSelected == pageNum)
          {
            $(paginationLi).addClass('active').removeClass('waves-effect');
          }
          $(pagination).append(paginationLi);
        }
      }
    },

    // lecTimes는 schedule_details 테이블에서 가져온 결과 배열
    insertLecTime: function(searchLi, lecTimes)
    {
      var sLi = searchLi;
      var lecTimeLen = lecTimes.length;
      var time_list_str = "";

      time_list_str = timetable.makeIntervalThirtyMin(lecTimes);

      sLi = $(sLi).attr('data-cell-time', time_list_str);
      return $(sLi);
    },

    // 시작시간 - 끝시간을, 30분 간격으로 string list 만듬
    // 월수13:00-15:00 : {start_time : 1330, end_time : 1500, day : "월"}
    //                  {day : "수"}
    // return : "v0_1300, v0_1350, v0_1400, v0_1430/v2_1300...,v2_1430"
    makeIntervalThirtyMin: function(lecTimes)
    {
      var time_list_str = "";
      var lecTimeLen = lecTimes.length;

      for (var i = 0; i < lecTimeLen; i+=1)
      {
        var i_time = lecTimes[i].start_time*1,
            e_time   = lecTimes[i].end_time*1;

        for (; i_time < e_time; i_time += 50)
        {
          time_list_str = time_list_str + lecTimes[i].day + "_" + i_time + ",";
        }
        time_list_str = time_list_str.slice(0, -1);
        time_list_str = time_list_str + "/";
      }
      // 마지막 "," 제거
      time_list_str = time_list_str.slice(0, -1);

      return time_list_str;
    },

    // 추가된 강의 시간표에서 미리보기
    // TODO : 변수 리팩토링 필수.. 나도 코딩하면서 헷갈림..
    fillPreviewLecture: function(lectureItem)
    {
      var l_item = $(lectureItem),
        // Split by Day, 요일에 따라 강의 시간 Split
        day_list_arr = $(l_item).data("cell-time").split("/");


        for(var i_day = 0; day_list_arr[i_day]; i_day+=1)
        {
          var time_list_arr = day_list_arr[i_day].split(",");

          // $("#"+time_list_arr[0]).attr('rowspan', time_list_arr.length).addClass("timetable__td--active");
          $("#"+time_list_arr[0]).addClass("timetable__td--active");
          for(var j = 1; time_list_arr[j]; j+=1)
          {
            // 중복검사
            // active 클래스 추가
            $("#"+time_list_arr[j]).addClass("timetable__td--active");
          //  $("#"+time_list_arr[j]).css('display','none');
          }

        }

        // 첫번째 셀에 rowspan, 강의명, 교수명 추가
    },
    erasePreviewLecture: function(lectureItem)
    {
      var l_item = $(lectureItem),
        // Split by Day, 요일에 따라 강의 시간 Split
        day_times = l_item.data("cell-time").split("/");

      for(var i_day = 0; day_times[i_day]; i_day+=1)
      {
        var all_time_list = day_times[i_day].split(",");

        // removeClass
        // rowspan 해제
        $("#"+all_time_list[0]).removeClass("timetable__td--active");

        for(var j = 1; all_time_list[j]; j+=1)
        {
          // 중복검사
          // active 클래스 추가
          $("#"+all_time_list[j]).removeClass("timetable__td--active");
          //$("#"+all_time_list[j]).css('display','table-cell');
        }

      }
    },

    // 시간표에 강의 등록 (via ajax)
    putLectureOnTimetable: function(lectureItem)
    {
      var sch_id = $(lectureItem).data('sch-id'),
        timetable_id = $("#timetable").data('t-id');
      // url = timetables/:timetable_id/timetable_items == timetable_timetable_items_url
      $.ajax({
              url:'<%= timetable_items_url %>'+'.json',
              dataType: "json", // response type
              type:'POST',
              beforeSend: function(xhr) {xhr.setRequestHeader('X-CSRF-Token', $('meta[name="csrf-token"]').attr('content'))},
              data: {'timetable_item': {'timetable_id':timetable_id, 'schedule_id':sch_id}},
              success:function(data)
              {
                alert('성공했수다..');
                // timetable에 fill 해주기
                timetable.fillLecture(data);
              },
              error:function(jqXHR, textStatus, errorThrown)
              {
                console.log(JSON.stringify(jqXHR));
                console.log("AJAX error: " + textStatus + ' : ' + errorThrown);
                alert("실패했수다..")
              }
            });
    },

    // data = { Lecture : {subject, professor, isu},
    //         Schedule : {id, place}}
    //  ScheduleDetails : {start_time, end_time, day}...}
    fillLecture: function(data)
    {
      var l_data = data,
          // return : "v0_1300, v0_1350, v0_1400, v0_1430/v2_1300...,v2_1430
          schedule_str = timetable.makeIntervalThirtyMin(data.schDetails),
          day_list_arr = schedule_str.split("/");

      for (var i = 0; day_list_arr[i]; i+=1 )
      {
        var time_list_arr = day_list_arr[i].split(","),
          time_cell = $("#"+time_list_arr[0]);
        $(time_cell).attr('rowspan', time_list_arr.length).addClass("timetable__td--has-lec");
        $(time_cell).html(""+data.subject+" "+data.professor+ " "+data.place);
        $(time_cell).addClass("t"+data.timeitem_id);

        // attr은 리턴값이 없다.... API좀 제대로 읽자..
        $(time_cell).attr('data-t-item-id', data.timeitem_id);


        for(var j = 1; time_list_arr[j]; j+=1)
        {
          $("#"+time_list_arr[j]).addClass("t"+data.timeitem_id);
          $("#"+time_list_arr[j]).addClass("timetable__td--has-lec");
          $("#"+time_list_arr[j]).css('display','none');
        }
      }
    },

    destroyTimetableItem: function(timetableItem)
    {
      var time_item = $(timetableItem),
          t_item_id = $(time_item).data("t-item-id");
          $.ajax({
    				url: "/timetable_items/" + t_item_id + ".json",
    				dataType: "json",
            data: {'id':t_item_id},
    				type: "DELETE",
    				success: function(result) {
              timetable.eraseLecture(result)
    					alert("삭제 성공")
    				},
    				error: function() {
    					alert('삭제에 실패했습니다. 다시 시도해 주세요.');
    				}
    			});
    },

    eraseLecture: function(time_item_id)
    {
      var time_item_tds = $(".t"+time_item_id),
          time_items_len = $(time_item_tds).length;

      for (var i = 0; i < time_items_len; i+=1)
      {
        $time_item_td = $($(time_item_tds)[i]);
        $time_item_td.removeClass().html('').css('display','table-cell');
        $time_item_td.prop('rowspan', null).prop('data-t-item-id', null);
      }
    }


  }
  $(document).ready(timetable.init);
})(jQuery,document,window);


</script>
